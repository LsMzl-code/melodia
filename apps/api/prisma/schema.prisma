generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Tonality {
  id     Int     @id @default(autoincrement())
  name   String  @unique
}

//* Gammes
model Scale {
  id Int @id @default(autoincrement())
  name String
  notes String

  // Une gamme n'a qu'un intervalle
  interval String

  // Une gamme appartient n'a qu'une tonalité
  tonality String
  mode String
  family String
  degree String?
  diagram String?
  // Une gamme peut avoir plusieurs diagrammes
  // diagrams ScaleDiagrams[]

  //! Gammes favorites
  // userFavourite FavouriteScales[]
}

//* Nom des gammes
model ScaleName {
  id     Int     @id @default(autoincrement())
  name   String  @unique

}

//* Nom d'accords
model ChordName {
  id     Int     @id @default(autoincrement())
  name   String  @unique
}

//* Famille de gamme (exotique, japonaise...)
model ScaleFamily {
  id     Int     @id @default(autoincrement())
  name   String
}

//* Famille d'accord (septième, neuvième...)
model ChordFamily {
  id     Int     @id @default(autoincrement())
  name   String
}

model Note {
  id        Int    @id @default(autoincrement())
  name      String
  reference String @unique
  // Note grave ou aïgue
  type      String
  // Son unique de la note
  soundUrl String
}

model Degree {
  id      Int    @id @default(autoincrement())
  content String
}

model ScaleInterval {
  id      Int     @id @default(autoincrement())
  name    String
  details String
}

model ChordInterval {
  id      Int     @id @default(autoincrement())
  name    String
  details String
}

model Chord {
  id        Int       @id @default(autoincrement())
  //* Majeur, Mineur mélodique, Andalouse...
  name String

  notes String

  //* Majeur, mineur, etc...
  mode String

  //* C, Db, F# etc...
  tonality String

  // Un accord n'a qu'une liste d'intervalles
  interval String

  // Une gamme ne peut être que dans une famille de gamme
  //* Classique, Harmonique, Pentatonique...
  family String

  //* Schéma sur manche de guitare
  diagram String?

  // Un accord peut être dans plusieurs progressions
  // progressions ChordsOnProgression[]

  // Un accord peut avoir plusieurs diagrammes
  // diagrams ChordDiagrams[]

  //! Accord favorites
  // userFavourite FavouriteChords[]
}

// // Progressions d'accords
// model ChordsProgression {
//   id      String  @id @default(uuid())
//   name    String?
//   degrees String

//   // Un progression ne peut être que dans une famille
//   family   ProgressionFamily @relation(fields: [familyId], references: [id])
//   familyId String

//   // Une progression d'accords peut avoir plusieurs accords
//   chords ChordsOnProgression[]

//   //! Progression favorites
//     // userFavourite FavouriteChordProgressions[]
// }

// // Famille de progression d'accords
// model ProgressionFamily {
//   id     String              @id @default(uuid())
//   name   String
//   // Un degré peut être dans plusieurs gammes
//   chords ChordsProgression[]
// }

// // Schemas d'accords
// model ChordDiagrams {
//   id      String @id @default(uuid())
//   name    String
//   imgUrl  String
//   // Un diagram n'appartient qu'a un accord
//   chord   Chord? @relation(fields: [chordId], references: [chordId])
//   chordId Int
// }

// // Schemas de gammes
// model ScaleDiagrams {
//   id      String @id @default(uuid())
//   name    String
//   imgUrl  String
//   // Un diagram n'appartient qu'a une gamme
//   scale   Scale? @relation(fields: [scaleId], references: [scaleId])
//   scaleId Int
// }

// //***** MANY TO MANY *****//


// // Notes dans les accords
// model ChordsOnProgression {
//   progression   ChordsProgression? @relation(fields: [progressionId], references: [id])
//   progressionId String

//   chord   Chord? @relation(fields: [chordId], references: [chordId])
//   chordId Int

//   // Ordre des accords pour l'affichage
//   orderNumber Int

//   @@id([progressionId, chordId])
// }

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  username String @unique

  role Role @default(USER)

  // Un utilisateur peut avoir plusieurs avatars
  avatar        Avatar[]
  currentAvatar String
  instrument    String?
  // phoneNumber     String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Confirmation de l'email
  isEmailConfirmed       Boolean @default(false)

  // Mot de passe oublié
  isResettingPassword Boolean @default(false)

  //     // //! Gammes favorites
  //     // favouriteScale FavouriteScales[]
  //     // //! Accords favorites
  //     // favouriteChord FavouriteChords[]
  //     // //! Progression favorites
  //     // favouriteProgression FavouriteChordProgressions[]
}

// model FavouriteScales {
//     id              Int  @id @default(autoincrement())
//       //! Un favoris n'appartient qu'à un seul utilisateur
//   user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId  String
//       //! Un favorite n'appartient qu'à un seul utilisateur
//   scale    Scale?   @relation(fields: [scaleId], references: [scaleId], onDelete: Cascade)
//   scaleId  String
// }
// model FavouriteChords {
//     id              Int  @id @default(autoincrement())
//       //! Un favoris n'appartient qu'à un seul utilisateur
//   user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId  String
//       //! Un favorite n'appartient qu'à un seul utilisateur
//   chord    Chord?   @relation(fields: [chordId], references: [chordId], onDelete: Cascade)
//   chordId  String
// }
// model FavouriteChordProgressions {
//     id              String       @id @default(uuid())
//       //! Un favoris n'appartient qu'à un seul utilisateur
//   user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId  String
//       //! Un favorite n'appartient qu'à un seul utilisateur
//   progression    ChordsProgression?   @relation(fields: [progressionId], references: [id], onDelete: Cascade)
//   progressionId  String
// }

//* Table contenant tous les avatars
model Avatar {
  id     Int    @id @default(autoincrement())
  name   String @unique
  imgUrl String @unique
  publicId String? @unique

  // Un avatar n'appartient qu'à un seul utilisateur
  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

//* Rôle des utilisateurs
enum Role {
  USER
  ADMIN
}

//* Token de réinitialisation de mot de passe utilisateur
model PasswordResetToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

//* Token de vérification de l'email utilisateur
model EmailVerificationToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}